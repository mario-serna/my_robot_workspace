// Generated by gencpp from file bug_algorithms/nodeState.msg
// DO NOT EDIT!


#ifndef BUG_ALGORITHMS_MESSAGE_NODESTATE_H
#define BUG_ALGORITHMS_MESSAGE_NODESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bug_algorithms
{
template <class ContainerAllocator>
struct nodeState_
{
  typedef nodeState_<ContainerAllocator> Type;

  nodeState_()
    : algorithm(0)
    , node_state(0)
    , node_state_desc()
    , bug_state(0)
    , bug_state_desc()  {
    }
  nodeState_(const ContainerAllocator& _alloc)
    : algorithm(0)
    , node_state(0)
    , node_state_desc(_alloc)
    , bug_state(0)
    , bug_state_desc(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _algorithm_type;
  _algorithm_type algorithm;

   typedef uint8_t _node_state_type;
  _node_state_type node_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_state_desc_type;
  _node_state_desc_type node_state_desc;

   typedef uint8_t _bug_state_type;
  _bug_state_type bug_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bug_state_desc_type;
  _bug_state_desc_type bug_state_desc;





  typedef boost::shared_ptr< ::bug_algorithms::nodeState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bug_algorithms::nodeState_<ContainerAllocator> const> ConstPtr;

}; // struct nodeState_

typedef ::bug_algorithms::nodeState_<std::allocator<void> > nodeState;

typedef boost::shared_ptr< ::bug_algorithms::nodeState > nodeStatePtr;
typedef boost::shared_ptr< ::bug_algorithms::nodeState const> nodeStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bug_algorithms::nodeState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bug_algorithms::nodeState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bug_algorithms

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'bug_algorithms': ['/home/mario/catkin_ws/src/bug_algorithms/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bug_algorithms::nodeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bug_algorithms::nodeState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bug_algorithms::nodeState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bug_algorithms::nodeState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bug_algorithms::nodeState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bug_algorithms::nodeState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bug_algorithms::nodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71ca713f8eb7d4e1de50aee1074f0a21";
  }

  static const char* value(const ::bug_algorithms::nodeState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71ca713f8eb7d4e1ULL;
  static const uint64_t static_value2 = 0xde50aee1074f0a21ULL;
};

template<class ContainerAllocator>
struct DataType< ::bug_algorithms::nodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bug_algorithms/nodeState";
  }

  static const char* value(const ::bug_algorithms::nodeState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bug_algorithms::nodeState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 algorithm\n\
uint8 node_state\n\
string node_state_desc\n\
uint8 bug_state\n\
string bug_state_desc\n\
";
  }

  static const char* value(const ::bug_algorithms::nodeState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bug_algorithms::nodeState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.algorithm);
      stream.next(m.node_state);
      stream.next(m.node_state_desc);
      stream.next(m.bug_state);
      stream.next(m.bug_state_desc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct nodeState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bug_algorithms::nodeState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bug_algorithms::nodeState_<ContainerAllocator>& v)
  {
    s << indent << "algorithm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.algorithm);
    s << indent << "node_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.node_state);
    s << indent << "node_state_desc: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node_state_desc);
    s << indent << "bug_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bug_state);
    s << indent << "bug_state_desc: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bug_state_desc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BUG_ALGORITHMS_MESSAGE_NODESTATE_H

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bug_algorithms/bugServiceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class bugServiceRequest(genpy.Message):
  _md5sum = "310f018babea00a829c4f64be9e6a75a"
  _type = "bug_algorithms/bugServiceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 algorithm
float32 velocity
float32 initial_x
float32 initial_y
float32 desired_x
float32 desired_y
bool simulation
bool reverse
bool choose
"""
  __slots__ = ['algorithm','velocity','initial_x','initial_y','desired_x','desired_y','simulation','reverse','choose']
  _slot_types = ['int32','float32','float32','float32','float32','float32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       algorithm,velocity,initial_x,initial_y,desired_x,desired_y,simulation,reverse,choose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(bugServiceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.algorithm is None:
        self.algorithm = 0
      if self.velocity is None:
        self.velocity = 0.
      if self.initial_x is None:
        self.initial_x = 0.
      if self.initial_y is None:
        self.initial_y = 0.
      if self.desired_x is None:
        self.desired_x = 0.
      if self.desired_y is None:
        self.desired_y = 0.
      if self.simulation is None:
        self.simulation = False
      if self.reverse is None:
        self.reverse = False
      if self.choose is None:
        self.choose = False
    else:
      self.algorithm = 0
      self.velocity = 0.
      self.initial_x = 0.
      self.initial_y = 0.
      self.desired_x = 0.
      self.desired_y = 0.
      self.simulation = False
      self.reverse = False
      self.choose = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i5f3B().pack(_x.algorithm, _x.velocity, _x.initial_x, _x.initial_y, _x.desired_x, _x.desired_y, _x.simulation, _x.reverse, _x.choose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.algorithm, _x.velocity, _x.initial_x, _x.initial_y, _x.desired_x, _x.desired_y, _x.simulation, _x.reverse, _x.choose,) = _get_struct_i5f3B().unpack(str[start:end])
      self.simulation = bool(self.simulation)
      self.reverse = bool(self.reverse)
      self.choose = bool(self.choose)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i5f3B().pack(_x.algorithm, _x.velocity, _x.initial_x, _x.initial_y, _x.desired_x, _x.desired_y, _x.simulation, _x.reverse, _x.choose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.algorithm, _x.velocity, _x.initial_x, _x.initial_y, _x.desired_x, _x.desired_y, _x.simulation, _x.reverse, _x.choose,) = _get_struct_i5f3B().unpack(str[start:end])
      self.simulation = bool(self.simulation)
      self.reverse = bool(self.reverse)
      self.choose = bool(self.choose)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i5f3B = None
def _get_struct_i5f3B():
    global _struct_i5f3B
    if _struct_i5f3B is None:
        _struct_i5f3B = struct.Struct("<i5f3B")
    return _struct_i5f3B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bug_algorithms/bugServiceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class bugServiceResponse(genpy.Message):
  _md5sum = "937c9679a518e3a18d831e57125ea522"
  _type = "bug_algorithms/bugServiceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success
string message

"""
  __slots__ = ['success','message']
  _slot_types = ['bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(bugServiceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.message is None:
        self.message = ''
    else:
      self.success = False
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.success))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.success))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class bugService(object):
  _type          = 'bug_algorithms/bugService'
  _md5sum = 'c7f9b178e6a7aa0cd2e64b98d5c26b60'
  _request_class  = bugServiceRequest
  _response_class = bugServiceResponse
